import static org.junit.Assert.assertEquals;
import java.math.BigInteger;
import org.junit.Test;


public final class Uint256Test {
	
	@Test public void testComparison() {
		String[][] cases = {
			{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
			{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000001"},
			{"0000000000000000000000000000000000000000000000000000000000000080", "0000000000000000000000000000000000000000000000000000000000000000"},
			{"ff00000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
			{"f000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
			{"0123400000000000000000000000000000000000000000000000000000000000", "0123400000000000000000000000000000000000000000000000000000000000"},
			{"0000000000000000000000000000000000000000000000000000000000000000", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"},
		};
		for (String[] cs : cases) {
			Uint256 x = new Uint256(cs[0]);
			Uint256 y = new Uint256(cs[1]);
			BigInteger a = new BigInteger(cs[0], 16);
			BigInteger b = new BigInteger(cs[1], 16);
			int cmp = a.compareTo(b);
			assertEquals(cmp == 0, x.equals(y));
			assertEquals(cmp == 0 ? -1 : 0, x.equalTo(y));
			assertEquals(Integer.signum(cmp), Integer.signum(x.compareTo(y)));
			assertEquals(cmp < 0 ? -1 : 0, x.lessThan(y));
			assertEquals(cmp > 0 ? -1 : 0, y.lessThan(x));
		}
	}
	
	
	@Test public void testAdd() {
		String[][] cases = {
			{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0"},
			{"0000000000000000000000000000000000000000000000000000000080000000", "0000000000000000000000000000000000000000000000000000000080000000", "0000000000000000000000000000000000000000000000000000000100000000", "0"},
			{"000000000000000000000000000000000000000000000fffffffffffffffffff", "0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000010000000000000000000", "0"},
			{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "0000000000000000000000000000000000000000000000000000000000000001", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f", "0"},
			{"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000", "1"},
			{"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe", "1"},
			{"ff00000000000000000000000000000000000000000000000000000000000000", "ff00000000000000000000000000000000000000000000000000000000000000", "fe00000000000000000000000000000000000000000000000000000000000000", "1"},
		};
		for (String[] cs : cases) {
			Uint256 x = new Uint256(cs[0]);
			Uint256 y = new Uint256(cs[1]);
			Uint256 z = new Uint256(cs[2]);
			assertEquals(Integer.parseInt(cs[3]), x.add(y, -1));
			assertEquals(z, x);
		}
	}
	
	
	@Test public void testSubtract() {
		String[][] cases = {
				{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0"},
				{"0000000000000000000000000000000000000000000000000000000000000003", "0000000000000000000000000000000000000000000000000000000000000002", "0000000000000000000000000000000000000000000000000000000000000001", "0"},
				{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000001", "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "1"},
				{"0000000000000000000000000000000000000000000000000000000000000000", "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "0000000000000000000000000000000000000000000000000000000000000001", "1"},
		};
		for (String[] cs : cases) {
			Uint256 x = new Uint256(cs[0]);
			Uint256 y = new Uint256(cs[1]);
			Uint256 z = new Uint256(cs[2]);
			assertEquals(Integer.parseInt(cs[3]), x.subtract(y, -1));
			assertEquals(z, x);
		}
	}
	
	
	@Test public void testShiftLeft1() {
		String[][] cases = {
			{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0"},
			{"0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000002", "0"},
			{"0000000000000000000000000000000000000000000000000000000080000000", "0000000000000000000000000000000000000000000000000000000100000000", "0"},
			{"00000000000000000000000000000000000000000000000000000000ffffffff", "00000000000000000000000000000000000000000000000000000001fffffffe", "0"},
			{"000abcdef0000000000000000000000000000000000000000000000000000000", "001579bde0000000000000000000000000000000000000000000000000000000", "0"},
			{"8000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "1"},
			{"ffff000000000000000000000000000000000000000000000000000000000000", "fffe000000000000000000000000000000000000000000000000000000000000", "1"},
			{"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe", "1"},
		};
		for (String[] cs : cases) {
			Uint256 x = new Uint256(cs[0]);
			Uint256 y = new Uint256(cs[1]);
			assertEquals(Integer.parseInt(cs[2]), x.shiftLeft1());
			assertEquals(y, x);
		}
	}
	
	
	@Test public void testToBigEndianBytes() {
		Uint256 x = new Uint256("292180db102e1f14bb371f9016e785d2c83b59aa29497ba9e595025d9373a038");
		byte[] b = x.toBigEndianBytes();
		assertEquals(0x29, b[ 0] & 0xFF);
		assertEquals(0x21, b[ 1] & 0xFF);
		assertEquals(0x80, b[ 2] & 0xFF);
		assertEquals(0x10, b[ 4] & 0xFF);
		assertEquals(0x14, b[ 7] & 0xFF);
		assertEquals(0x7b, b[22] & 0xFF);
		assertEquals(0x73, b[29] & 0xFF);
		assertEquals(0x38, b[31] & 0xFF);
	}
	
}
