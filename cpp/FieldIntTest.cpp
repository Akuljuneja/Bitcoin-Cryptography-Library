/* 
 * A runnable main program that tests the functionality of class FieldInt.
 * 
 * Bitcoin cryptography library
 * Copyright (c) Project Nayuki
 * 
 * http://www.nayuki.io/page/bitcoin-cryptography-library
 * https://github.com/nayuki/Bitcoin-Cryptography-Library
 */

#include "TestHelper.hpp"
#include <cstdio>
#include "FieldInt.hpp"


/*---- Structures ----*/

struct BinaryCase {
	const char *x;
	const char *y;
};

struct TernaryCase {
	const char *x;
	const char *y;
	const char *z;
};


// Global variables
static int numTestCases = 0;


/*---- Test cases ----*/

static void testComparison() {
	BinaryCase cases[] = {  // All hexadecimal strings must be in lowercase for strcmp() to work properly
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"f000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0123400000000000000000000000000000000000000000000000000000000000", "0123400000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000080", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"ff00000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		BinaryCase &tc = cases[i];
		int cmp = strcmp(tc.x, tc.y);
		FieldInt x(tc.x);
		FieldInt y(tc.y);
		assert((x == y) == (cmp == 0));
		assert((x != y) == (cmp != 0));
		assert((x <  y) == (cmp <  0));
		assert((x >  y) == (cmp >  0));
		assert((x <= y) == (cmp <= 0));
		assert((x >= y) == (cmp >= 0));
		numTestCases++;
	}
}


static void testAdd() {
	TernaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000080000000", "0000000000000000000000000000000000000000000000000000000080000000", "0000000000000000000000000000000000000000000000000000000100000000"},
		{"000000000000000000000000000000000000000000000fffffffffffffffffff", "0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000010000000000000000000"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000001", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d"},
		{"ff00000000000000000000000000000000000000000000000000000000000000", "ff00000000000000000000000000000000000000000000000000000000000000", "fe000000000000000000000000000000000000000000000000000001000003d1"},
		{"cf82a6e670c187af1855bfd6a02f676d58b2659a6010eda5b1ada5662135ea37", "3130ec4c765e299fe200cd62bf4439f061440b57751b104bf14552a553064508", "00b39332e71fb14efa568d395f73a15db9f670f1d52bfdf1a2f2f80c743c3310"},
		{"f93cab87674d5fea845300e8bc63c9d313585200f2da0e9b955cd07fafb46787", "42207c06d78bd8d62c57746d35d0427ad9edaa7d8aa2bfd39144167418e44dc4", "3b5d278e3ed938c0b0aa7555f2340c4ded45fc7e7d7cce6f26a0e6f4c898b91c"},
		{"a30910e72fd6ac01a3ef74124085ecda6713b0e4d7e840c4890ecd272c83a394", "71ab910a371a0d15370c19d5b1562edb339c66c9dbc72e4194d5b3361f9208b6", "14b4a1f166f0b916dafb8de7f1dc1bb59ab017aeb3af6f061de4805e4c15b01b"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		TernaryCase &tc = cases[i];
		FieldInt x(tc.x);
		x.add(FieldInt(tc.y));
		assert(x == FieldInt(tc.z));
		numTestCases++;
	}
}


static void testSubtract() {
	TernaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000003", "0000000000000000000000000000000000000000000000000000000000000002", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000001", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e"},
		{"0000000000000000000000000000000000000000000000000000000000000000", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"0000000000000000000000000000000000000000000000000000000000000000", "0fff000000000000000000050000000400003000000000000200100000000000", "f000fffffffffffffffffffafffffffbffffcffffffffffffdffeffefffffc2f"},
		{"484786b41f8cc919c7b47e08b918e13bcadf20777224e3b7c7334edf6e98cbbe", "57f3e075c0014548eb29756f8c4394d1541112662c298f8bac5211f7fc9d8930", "f053a63e5f8b83d0dc8b08992cd54c6a76ce0e1145fb542c1ae13ce671fb3ebd"},
		{"69a1b6279f3cf9e29d9d46c32aebab2694a25dfe291a2b6f7a8116727b811705", "290113fe9d369fe41f1cb33b29ad34666744a06a310a30a98b8d631a36133a4b", "40a0a229020659fe7e809388013e76c02d5dbd93f80ffac5eef3b358456ddcba"},
		{"e5e4684e5edda9eefa6d4cbf84089280750391e9e68b95c84c671b07d2af9081", "686058d3961a761d9a60e2810487bde706bb5df21005e4ec1c2b68ecc7f6e241", "7d840f7ac8c333d1600c6a3e7f80d4996e4833f7d685b0dc303bb21b0ab8ae40"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		TernaryCase &tc = cases[i];
		FieldInt x(tc.x);
		x.subtract(FieldInt(tc.y));
		assert(x == FieldInt(tc.z));
		numTestCases++;
	}
}


static void testMultiply2() {
	BinaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000002"},
		{"0000000000000000000000000000000000000000000000000000000080000000", "0000000000000000000000000000000000000000000000000000000100000000"},
		{"00000000000000000000000000000000000000000000000000000000ffffffff", "00000000000000000000000000000000000000000000000000000001fffffffe"},
		{"000abcdef0000000000000000000000000000000000000000000000000000000", "001579bde0000000000000000000000000000000000000000000000000000000"},
		{"8000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000001000003d1"},
		{"ffff000000000000000000000000000000000000000000000000000000000000", "fffe0000000000000000000000000000000000000000000000000001000003d1"},
		{"7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe17", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e"},
		{"7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe18", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d"},
		{"34c8b477c0e20991a17f295a49f4f671ec4126cee5a07edef85ba9ce12167127", "699168ef81c4132342fe52b493e9ece3d8824d9dcb40fdbdf0b7539c242ce24e"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		BinaryCase &tc = cases[i];
		FieldInt x(tc.x);
		x.multiply2();
		assert(x == FieldInt(tc.y));
		numTestCases++;
	}
}


static void testMultiply() {
	TernaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"0000000000000000000000000000000000000000000000000000000000000002", "0000000000000000000000000000000000000000000000000000000000000004", "0000000000000000000000000000000000000000000000000000000000000008"},
		{"000000000000000000000000000000000000000000000000000000000000bb81", "0000000000000000000000000000000000000000000000000000000000002375", "0000000000000000000000000000000000000000000000000000000019f854f5"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc25", "000000000000000000000000000000000000000000000000000000000000001e"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000", "000000000000000000000000000000000000000000000000fffff85e000e90a1"},
		{"abc928448f874620bdb2d01f4d797eed5788cc2475334002e16e6bcc12dcf419", "d661b81bed420f5b5dd8027d1486c7d27c85e6bdb0405ec07849cfd1a7ee526c", "ab599d4fe47beb97c94342af197455f0436f10c40395ddd42128417885c672ba"},
		{"3720e6127667a3de448044ee8decd7c96f345cda261682a4386719a387c37ed5", "f8e32435123472d4949bf98c22a87a374923a3b06b289ef15e93f0940aab3650", "1796b08378c50ff3394b99a672d9b09593a1c6d5f5af593b7115c786e5bf1cd3"},
		{"47e3d45c7f5a64de0d4913911d541bbc0df640c0920a4fb42fc6ed5ace413d51", "e8bd16cb61df4b53b66a35140377314b7ea9cb1099d7e1f05fc50fc49d0eddf2", "c676783301fd88069b4b1c36863b88baa27b9d7a9c27c9e06203df15809cac2f"},
		{"c3aacf7136f758a89979dd75cf45b6af07486d43d1b5767c269210ee61c904f4", "ea31def20213b863699c0f370265e53f8fdca440cc0690e6d3672928bea51dc4", "b07726b8e2591c33db8e3a2eb214b10b878a7e81b45420508b1ed0ec6bef7921"},
		{"290c735eecfedd247d92d5db8ced26626f8196e2a6f0d7282d97354484134110", "e0bbdef09c2e071d94f71fa78dde9e5e785c3af99c53ddf63f29409752488c53", "90d08d31627d37bd120577a9910d6b737de0732f9156de5044d88eba3ba726f3"},
		{"926e48eb3b5e7017d3c4bdf3fcd34938bb469782991eb4d8afa8fdc192091058", "d61c4475d5e43ce7f7f922f4ba9e1d52a94602cfbf73836ec20ecf748d7a2ab2", "0426cf89d91a2d2bc186255a9fe55bfb00679e101919c5af0c9bfa7820060c32"},
		{"71d40203aec9cc1a35cf06b490a742208729b7a000ca8dd32e72a7813d98ab44", "a59f39fc19046e62cb85f0654133e0323c5a21020d5f26b1a52a41626689e330", "1a4e32c22bf8b090962c78df069fd5a5cc8f77d53c44758aa24bf6064ebb7cbd"},
		{"5cfbd891a5591d3d2b48eafa4cf890804d8b4af83d2ca1b1bf0d8e723575c657", "ced7a3ac8df01f9e1fb478ddde3db6b20fbc61709798525099c6ce4cbe21e78e", "b36988ac85db0d0af431fb25efae653cd276bd46a465de2fc076e078d0247cdd"},
		{"0000000000000000000000100000000004000000008000000000000000000000", "0400020000000000000400000040000000000000000000000000000000000000", "0000200000000000400020f4408a20083d521e89ffe213e0443e120003d8a200"},
		{"0000000000000000800000000000000200000000000000000000020000000000", "0000000000000004000000000000000000000000000000000000000000100000", "000008000008000000000002002007a20000000800001e882000000000000000"},
		{"0000000004000008000000000000000000000000100000000000000000000000", "0000000000000000000001000000000000000000000000000000000000000000", "00000000000000000000000400001744001e8800000000000000001000003d10"},
		{"0000000000000000000000002480000000000800000000000000008000000001", "0000000000000000000000000000000000000000000000000000000010000000", "0000000000000000024800000000008000000000000000080000000010000000"},
		{"0000000000010100000080000000000000000000000000000000000000000000", "0000000000800004002000000000000000000000000000000000000000000000", "00000000000000808005eec8af56b2ea27a23d10000000000000000000000000"},
		{"0000000000001900004000000000000000000000000000000000000000000000", "0000000004000000002000000000000000000020010000000000000000010000", "00000000190000a400027da723d113ed201e88000003201913edbf8788f44000"},
		{"0000000020000000000000000800020000000004004000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000008000000000000500010000000", "0000020000000000000000000000020000000000000000000000000002000080", "000010000000000000a000200000000010001400003d10a000e8002a62a07a20"},
		{"000000080080200822000024800000809021080140000120400020000402001a", "0800002000000081000000002080080008000011408040060000008002001818", "d410273d5d74934ec1e3f70c03f86a8f88f14d8b43a495d294960f65f535a7b1"},
		{"0000000080800584081000825000448240002002000000220000000000000010", "1000004400000000000000004000020240a08200080512000080080400090400", "85c3f6129b1069554ca017978e5a061702c737ae9b9bfe0fe9a6e4ffc946328f"},
		{"0000000000002010401800001030604101000010000000008408001000500000", "0020002000400040000000020210408008800025000080100004004001000000", "b2539614159365e59e3499117513e7c65127c0d3e6f333998c218c0fa4913626"},
		{"0009000200002008000c24200400000000040402000000004400200000000000", "00000000000820008001004400800a040002000000000004080c0000002c0010", "10b16ac39b468c6dbd6c29dc447f96b3e9771a6de522482a3ecdebe39fef9709"},
		{"0800002000010240400000000004010281020000002c00200000840280000402", "0010000800000400000064000200002481000010080134001200000000001000", "a231b671857bb0bc56a1c93123161abf32a21e0f6c9b1ff7280fbf52db2914ca"},
		{"0041004100000a00000480060000001000405000008000020080014001200100", "0000008000021200040006000000000220000000040200000080180082042500", "3cab4633b74e7afd47308b17cd30789f478de90ecf66c427ca6fe1bfefdf2a5b"},
		{"0000000442001000102010400000000000024100010000000222000008000000", "4001000000000400000000020000088000200000004000000000008100208000", "003f3b8ae945a87904b68fc3fde734e6634e4ee7575197e3ba1446454abd96a3"},
		{"0040050240000002000010009004000110000000080880800804040001000000", "8000001400020200000000080000800080000000008008104000000280001000", "ac8f2c2189bc7f99e69e4a846078977f4333cbfda90813432dd02fed00efd90c"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		TernaryCase &tc = cases[i];
		FieldInt x(tc.x);
		x.multiply(FieldInt(tc.y));
		assert(x == FieldInt(tc.z));
		numTestCases++;
	}
}


static void testSquare() {
	BinaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"000000000000000000000000000000000000000000000000000000000000000d", "00000000000000000000000000000000000000000000000000000000000000a9"},
		{"0000000000000000000000000000000000000000000000000000000000010000", "0000000000000000000000000000000000000000000000000000000100000000"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c", "0000000000000000000000000000000000000000000000000000000000000009"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d", "0000000000000000000000000000000000000000000000000000000000000004"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"0000000000400000000100000004000000011040000000200400000000401002", "824028092388408020852b028011ef0a4223e7613008271c6082557b22225e8c"},
		{"0000000000000000000002100000000000000001000000100000000000000800", "0000420000000001002100200000010000045100103d110000000420004fbe20"},
		{"0002020040000200000000000000100000000410000000000000000000000000", "08871062b331535bb68fd1004f8408f544eeca47369c40883f044007d1000f44"},
		{"1000000008008400000000000000000000200000000000000020000000000000", "d2001483d17f00c1386f8543c11400000f46042107a67df110460027d8a28964"},
		{"0018484a883c83014f000060a81004032e4280b134e118202cd6002001020008", "28f4f42e263ebfd3d490ebf20f0b8671c64d3ac29ffcba6d5ccd5860c126d125"},
		{"10090024008008c8002010800015a0113822109912105300048c0280a2b00c11", "178e0e76e746ff9a20e4596880126da1b2732e969294120bdb97100b69c08160"},
		{"0c49400420000200c031484216240a804408000240600446c122812001008040", "42d4ec4e80b8c5ef9580e5701247ea77186f63f27792136a4b8e2cf2ac8538b4"},
		{"002a8023b00101000460200300e05490104240a14300008041c0210800240102", "4289c245d69b319990dd4c39dff331e4526bf586ce891664a7b523aac8917ba0"},
		{"d44459ec5669c56c03485be9c803519eeb977f8a6000f792d0916b43031eec1c", "c50fba1b1469d877f7391a7c4384d4ada8b5a10b5505ea00cc822368cef7d2ed"},
		{"03faec56081e36092a72fa87b01132c946a60307cd8bf2032725423d44894689", "56e50be9e1a6aefccfbb4a212d495617dcc35c141f96a7fc298071e812a03c52"},
		{"ab013b2a27380172d641b9e05471e91edb00d962610e018334b19e7fa1ffe0a9", "3ee56e4d501d9d17d064e53c9a7b5a793aad6cc28ff7a5516205acd7d489b750"},
		{"32f2943da6ec0cad5e69c0c9b1437a5ea3b9a9ffa14e92c0f6b51c25fd400661", "f7c9fb555af3d1a3e3fa5a23c571e51f4b7835a3e6de979c9d76626526ee81a5"},
		{"b7aaf40f663fb643ba2c24eb0ba4b4e50d159041c5f8317ea452f6851bde308b", "e18f65f416f5d4f22e798cf6fd36cca3f7d6579c38f07d10a78e4a3948645edf"},
		{"e83608ece352fc369836fb19b5ebe6b565254bf4c644b71ea2cd4227c30ffa8e", "456e921dae39689efdfcb5c84314066003dc0dac3efbc38658461191c3f2ccb2"},
		{"82914a20f06d7b6b14bb3a4e133c9502adb2d82cfe99010507425fd69870c31a", "548b693ed55f7f9dbd465564b2b40c960a05de3b87eec8c464d0b0c3c04db6ff"},
		{"f8f2c1d5a0c5005e82cf09331249d8325885d254af460deedee00df91fcfee7b", "61050fa8e39add595250db4f27d1764d7ed576c9c1bf61992b8ba870ce83ade2"},
		{"ffffffffffeffffffdfffffffffffffffefabffffffffffdbffffefdffffdfff", "29210aa31a000170c49bb1020d82c03ea73c252c808237011014bd6115e28900"},
		{"7fffeffffffffefffffeffffffbfefffffffbffffff7ffffffff7fffffffffff", "49c31305e11b3144a611f0c173d3eea0cb244659c4297cd5e7d5a305b0c74694"},
		{"fffffffefff7ffbfffffefeffffffffffffffffffffffffff5fffffffff7ffff", "fffff9a2070dfc72419892f045bfb5f4f10c8903c4a670b4d3f0a82e197130a2"},
		{"fffbffffffffffffffffffffffffffffffffffffffffffffdffffdffffffffff", "e1803d100000000000000000000000000400007fc004fb0d13b9c7ebf186c23f"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		BinaryCase &tc = cases[i];
		FieldInt x(tc.x);
		x.square();
		assert(x == FieldInt(tc.y));
		numTestCases++;
	}
}


static void testReciprocal() {
	BinaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},  // Special value
		{"0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"0000000000000000000000000000000000000000000000000000000000000002", "7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe18"},
		{"0000000000000000000000000000000000000000000000000000000000000003", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9fffffd75"},
		{"0000000000000000000000000000000000000000000000000000000000000004", "3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c"},
		{"000000000000000000000000000000000000000000000000000000000000000b", "45d1745d1745d1745d1745d1745d1745d1745d1745d1745d1745d1741745d06a"},
		{"8000000000000000000000000000000000000000000000000000000000000000", "937a320a2aa70733388d85852be56ec3796447fdb84940b3b070123b10d03625"},
		{"ff00000000000000000000000000000000000000000000000000000000000000", "c6839ca1b70a8e27c40acd902618d031eea0c4c39fc464be96ced7f5016982bc"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c", "55555555555555555555555555555555555555555555555555555554fffffeba"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d", "7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe17"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e"},
		{"0000000040000000002000000010000000000000000000000000010000000000", "ecb197b0af02ba21f11dc46e5176c9768dabd04632ed312a0179307a61d8651f"},
		{"0000000000000000010000000000020000000000000000000000000000000000", "ce9f88395251c47da1b15a389ba516758397e687f84a29d032f00f6addc00ed2"},
		{"0100000000000000000000000002000000000000000000008002001200000000", "e7bb6e5a4665cddd8048383e758a2bc392b318a7d9e475bf9de1832ea11e45b1"},
		{"0000000000000000000100000000000000000000000000000000000080000000", "0be4c6479a2c9cd9b5a3fc1b2fb6037557c5cc32d20d32e9b193252df60da1b0"},
		{"0000000000000000000000000000000000000000000000000000000800000000", "ba44a6a61fffffffffffffffffffffffffffffffffffffffffffffff45bb5693"},
		{"0000000000800200000000000000000000000000080000000000000000000000", "86c2a63aff967fc3296b4c0326f8c22cd462fe747cd84c10837393feb9b4331a"},
		{"0000010000000000000000000000000000000000000002000000050080000000", "b20ba22045ba27232c6d8e73e6130e53ffe86192312336a7994aa67bb9539d8d"},
		{"0000000000000000000000200000000000002000008000000000000000000020", "3dfe456451645a345f2c283f4c23370cd91e920685cd7d35b3d63acb4d3e4486"},
		{"2000000000100000000002080000000020000000000000000020001000000000", "c5b46c7779772c9841abd475accf25fa0c655aa1252c8d3dd370b918bf0bee42"},
		{"0002000000000000004000000000000000000040011000004200000000000100", "35fa2b66b444a2646e8eb584cf074d364c8de82b3f9c3f4bb484871840222b87"},
		{"c000010001008000000000400040420000800000200004000002000000000000", "691762bb9927d1fde37c393ca61a47266799d10d02384f11cec66d471233dd76"},
		{"0000000000000000000000200001000040000000000000000000000004000000", "2f5d91fa0379199695f85abec690eb7bc6623ded3f436266d79b8372cefecc3a"},
		{"002000440008840000020190000000010131060000020110400a200000020200", "72370c13808001fbdaa830fce93d107116ecd5c4b55aca10e17034390d8e2c32"},
		{"0000509000110410a00220028004020000020000200840404000000200000200", "a9e40b54b7fb071239fd53ca5570eedaf3f5cfa71357faa1ae6d80e36fef5671"},
		{"02002000000080500010040300a0003400200000000100000200000600001000", "2731d77e65ef210f658e01903bfe82476d71c6769008b8e9b7c22235b1b950b2"},
		{"0000008020000000028101042002000090028010010000601200220001102004", "8a7c67e47823ccac705d024189cc151e08da9c3d437679c6de988966d2e0737f"},
		{"580abfe333c14a172b4ee30a6e3414b1793b5a1b7e044512f03762437316485b", "19303494171d57d45a42d7847caef83dddcbb15ee09b89a22846c447234e3c9c"},
		{"5dbd48d823fc1ce863124c73536c19d4d367d1c0cf93af3b4a9c5c042cf04127", "12ac8fbc16bcbd123504c03e64cacc63221c5dec490a55d423edc164d671ac8a"},
		{"7b1acf5305bcef21ee8262cb3501f7dfa9f4757b125ee2689b139559ab737e94", "d48b8c7717158e6a880ee7a15a6dee751b6ece610099beac041b005d9811552c"},
		{"88f92281d8b79f249434ee365a77c8331dd15960f17a2285fcbf62913dae638e", "7fb174e4018d369fa85891f1d3b4a5c9de9d27c89c5c6b82989dfde444e9fdea"},
		{"fc5ca7167df8a7f5ac2a4b326d9ef89510c157d466160702c6eb136cd7877c0b", "cdb8fa655dd940589ee9aced17a3e345071c950e812d3bbdcb1f83d73e898955"},
		{"7bdbdd9eba49a09dc328ac060378aaa90149bb97877aa27ee2c0f49e78093b4a", "02a68dd563ad0fc338d7f8c7d139b2b1d6a4f6b666406377c9ec362a211347bd"},
		{"72b6e00d159efb4e46346b6d9541cb81a0337013a3569d54a80ceea5a03bd408", "28c8403eef7d2642674ae68f0cd58991b69ef41f4186a8329c023cde4d0120d2"},
		{"109cc7044f9f1edbee64aa8d33ea4325116183e9eb1574a600b04589c045048b", "e93cff3c41d12b3c303de828929b29bffd0d1dbfc4384323a7b754e29c321442"},
		{"084f1def6553cf294586dcb74ba804019add34d2343abbbff19a2ea9a453cb6d", "a70cc5b12fc2dcdb8650c2616d15474460d97b8e20c0b562c8c0d278aa79f0ae"},
		{"570229d6f3c7354805ce394505bf04b653075f7b05bbb754697c88ac1bd7207e", "4dda6708b65bd91b91403b0f84a4983dc239fa789f8fd9a533859c34a01702cf"},
		{"44a266d4f06d2376a466b7b4cd56e9c1d8a13fd15d6064ca6da7f82f44bfa984", "f92fd6e20e9dba93efbceff5d4670bde15af1a6ab91e17ad1dc877192c5701ae"},
		{"1ff4707865a5c29cbd08ec6ec97abb9c4b8abd8d4074b2c1dd49144234e00de7", "b3fcaa1b76c5a609169ac5026c385aaf3beb37cbe2c34ebfd1c49f02474ecc5d"},
		{"fffffbf7ff7ffffffffbff7fffffffff7fffffffee7dfdbfffffffbfdeffffff", "10176da98cf511e10cb469de3c21b32f725d8cd4e5d3d1c7ef2807a46ee83919"},
		{"fbf7ff7fffffffffffedffffffff7fff3ffffff7ffd7ffffdffef9ffff7f7fff", "f35a05c33e845843b90941b4d9887bc338a58acc209aa384288484d00a103e7d"},
		{"fcd9fffffffdfffffb7bdff7ffffffffb7fbfdfffde7fffffff5df7fbbfffbff", "5872ba2f65d0258a43b9655c71cebf2dccb776d0e312b82f511fe018fcbc90cc"},
		{"f5dfffdcbffffeffffffffffffcfcf7ffdfffffbed7fe2ffefdf7ffffffffefe", "e0b08d6c7c1b2c06bfae1ee52687f40f476aeb06c55b97cae73619f19390a1f1"},
		{"fffffffffffffffeffbeeff7fffffffffffbfffffffffffdffbfffffffffffff", "cb316b57bb720f5f4107b2f015bac4e448d4a8fb454c04e3d1e3d3a40417467e"},
		{"ffffff7ffffffffffffffdffffffffffffffbfbfeffffdfffffffffbffffffff", "e93c93e84b6fbaadaf9375b370338a3ffb40548e580df43e86b790fcce9a1eb2"},
		{"fcffffffbdfffb7ffffffbfffffffffffffffff7ffff7ffffffffbffffefffef", "4b11c164854d94dd8506e49e6f63415f84d4e87d4aeaa556da49b1b8755c988f"},
		{"fffffffffff7ffffbfffffffffdfffffffffebfffffffff7fbffffdffffffff7", "e92abd8e79c2a960431ed5186b773b28150634b4348e53260bd45cdca10007c8"},
		{"fffffffffffd7ffffffffffffffffffffdffffffffffffffff7ffdffffffffff", "a4b4bc0c127d58acf38611f6b342b7987d8ed3ecc478fba4ed39008dc6897b40"},
		{"fffffffffffffffffff7ffffffffffdfffff7fffffffffffffffdfffffffffff", "936e477cb1370054ededf2b53d94a76ca43634cb5e7d0164004e7ce7c2f39d7b"},
		{"fffbfffffffffffffffffffffffffffffffffffffffffffffffffffffbffffff", "8c4dce37e34c5d5440586b9b85905c9132d219e34c476b8c40c2787a23ff6ac9"},
		{"ffffbffffffffdffffffffffffffffffffffffffffffffffffffffffffffffff", "7263040b5eee4822288b6a963b256ff428820bac9240e07b08ca6ddbf1908888"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		BinaryCase &tc = cases[i];
		FieldInt x(tc.x);
		x.reciprocal();
		assert(x == FieldInt(tc.y));
		numTestCases++;
	}
}


static void testConstructorUint256() {
	BinaryCase cases[] = {
		{"0000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"0000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"8000000000000000000000000000000000000000000000000000000000000000", "8000000000000000000000000000000000000000000000000000000000000000"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f", "0000000000000000000000000000000000000000000000000000000000000000"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30", "0000000000000000000000000000000000000000000000000000000000000001"},
		{"fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc32", "0000000000000000000000000000000000000000000000000000000000000003"},
		{"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "00000000000000000000000000000000000000000000000000000001000003d0"},
	};
	for (unsigned int i = 0; i < ARRAY_LENGTH(cases); i++) {
		BinaryCase &tc = cases[i];
		assert(FieldInt(Uint256(tc.x)) == FieldInt(tc.y));
		numTestCases++;
	}
}


int main(int argc, char **argv) {
	testComparison();
	testAdd();
	testSubtract();
	testMultiply2();
	testMultiply();
	testSquare();
	testReciprocal();
	testConstructorUint256();
	printf("All %d test cases passed\n", numTestCases);
	return 0;
}
